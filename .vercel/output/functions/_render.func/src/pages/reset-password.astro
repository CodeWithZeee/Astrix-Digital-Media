---
// Get reset token from URL
const url = new URL(Astro.request.url);
const token = url.searchParams.get('token');
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Reset Password | Astrix Digital Media</title>
    <meta name="description" content="Reset your Astrix Digital Media account password." />
    <link rel="icon" type="image/png" href="/Astrix_favicon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="min-h-screen bg-gradient-to-br from-white to-gray-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
    <main class="w-full max-w-md sm:max-w-lg lg:max-w-xl p-6 sm:p-8 lg:p-10 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700 transition-transform duration-300 ease-in-out hover:scale-105">
      <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-center text-primary-600 dark:text-white mb-6">Reset Password</h1>
      
      {!token ? (
        <div class="text-center">
          <p class="text-red-600 dark:text-red-400 mb-4">Invalid reset link. Please request a new password reset.</p>
          <a href="/forgot-password" class="text-primary-600 dark:text-primary-400 hover:underline">Request Password Reset</a>
        </div>
      ) : (
        <>
          <p class="text-center text-gray-600 dark:text-gray-400 mb-6">
            Enter your new password below.
          </p>
          
          <!-- Error/Success Messages -->
          <div id="message" class="hidden mb-4 p-3 rounded-lg text-sm"></div>
          
          <form id="resetPasswordForm" class="space-y-5">
            <input type="hidden" id="token" value={token} />
            <div>
              <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">New Password</label>
              <input 
                type="password" 
                id="password" 
                name="password" 
                required 
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 focus:outline-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
                placeholder="••••••••" 
              />
              <div id="passwordRequirements" class="mt-2 text-xs text-gray-500 dark:text-gray-400">
                <p>Password must contain:</p>
                <ul class="list-disc list-inside space-y-1 mt-1">
                  <li id="length">At least 8 characters</li>
                  <li id="uppercase">One uppercase letter</li>
                  <li id="lowercase">One lowercase letter</li>
                  <li id="number">One number</li>
                  <li id="special">One special character (@$!%*?&)</li>
                </ul>
              </div>
            </div>
            <div>
              <label for="confirmPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Confirm New Password</label>
              <input 
                type="password" 
                id="confirmPassword" 
                name="confirmPassword" 
                required 
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 focus:outline-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
                placeholder="••••••••" 
              />
            </div>
            <button 
              type="submit" 
              id="submitBtn"
              class="w-full py-3 px-4 bg-primary-600 dark:bg-neutral-800 text-white font-semibold rounded-lg shadow hover:bg-primary-700 dark:hover:bg-neutral-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="btnText">Reset Password</span>
              <span id="btnSpinner" class="hidden">Resetting...</span>
            </button>
          </form>
        </>
      )}
      
      <p class="mt-6 text-center text-sm text-gray-600 dark:text-gray-400">
        Remember your password?
        <a href="/login" class="text-primary-600 dark:text-primary-400 hover:underline">Log in</a>
      </p>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('resetPasswordForm');
        if (!form) return; // No form if no token

        const messageDiv = document.getElementById('message');
        const submitBtn = document.getElementById('submitBtn');
        const btnText = document.getElementById('btnText');
        const btnSpinner = document.getElementById('btnSpinner');
        const password = document.getElementById('password') as HTMLInputElement;
        const confirmPassword = document.getElementById('confirmPassword') as HTMLInputElement;
        const token = (document.getElementById('token') as HTMLInputElement).value;

        // Password validation
        function validatePassword(password: string) {
          const requirements = {
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            number: /\d/.test(password),
            special: /[@$!%*?&]/.test(password)
          };

          // Update requirement indicators
          Object.keys(requirements).forEach(req => {
            const element = document.getElementById(req);
            if (element) {
              element.className = requirements[req] ? 'text-green-600' : 'text-red-600';
            }
          });

          return Object.values(requirements).every(Boolean);
        }

        function showMessage(text: string, type = 'error') {
          messageDiv.textContent = text;
          messageDiv.className = `mb-4 p-3 rounded-lg text-sm ${
            type === 'error' ? 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300' : 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300'
          }`;
          messageDiv.classList.remove('hidden');
        }

        function hideMessage() {
          messageDiv.classList.add('hidden');
        }

        function setLoading(loading: boolean) {
          (submitBtn as HTMLButtonElement).disabled = loading;
          btnText.classList.toggle('hidden', loading);
          btnSpinner.classList.toggle('hidden', !loading);
        }

        // Real-time password validation
        password.addEventListener('input', function() {
          validatePassword(this.value);
        });

        // Confirm password validation
        confirmPassword.addEventListener('input', function() {
          if (this.value && this.value !== password.value) {
            this.setCustomValidity('Passwords do not match');
          } else {
            this.setCustomValidity('');
          }
        });

        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const passwordValue = password.value;
          const confirmPasswordValue = confirmPassword.value;

          // Basic validation
          if (!passwordValue || !confirmPasswordValue) {
            showMessage('Please fill in all fields');
            return;
          }

          if (!validatePassword(passwordValue)) {
            showMessage('Please ensure your password meets all requirements');
            return;
          }

          if (passwordValue !== confirmPasswordValue) {
            showMessage('Passwords do not match');
            return;
          }

          setLoading(true);
          hideMessage();

          try {
            const response = await fetch('/api/auth/reset-password', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ token, password: passwordValue })
            });

            const data = await response.json();

            if (response.ok) {
              showMessage('Password has been reset successfully! Redirecting to login...', 'success');
              
              // Redirect to login page after a delay
              setTimeout(() => {
                window.location.href = '/login';
              }, 2000);
            } else {
              showMessage(data.error || 'Failed to reset password');
            }
          } catch (error) {
            console.error('Reset password error:', error);
            showMessage('Network error. Please try again.');
          } finally {
            setLoading(false);
          }
        });

        // Clear message when user starts typing
        password.addEventListener('input', hideMessage);
        confirmPassword.addEventListener('input', hideMessage);
      });
    </script>
  </body>
</html>