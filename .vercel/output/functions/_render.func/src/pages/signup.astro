---
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Sign Up | Astrix Digital Media</title>
    <meta name="description" content="Create your Astrix Digital Media account to access AI-powered business tools." />
    <link rel="icon" type="image/png" href="/Astrix_favicon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="min-h-screen bg-gradient-to-br from-white to-gray-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
    <main class="w-full max-w-md sm:max-w-lg lg:max-w-xl p-6 sm:p-8 lg:p-10 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700">
      <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-center text-primary-600 dark:text-white mb-6">Create Your Account</h1>
      
      <!-- Error/Success Messages -->
      <div id="message" class="hidden mb-4 p-3 rounded-lg text-sm"></div>
      
      <form id="signupForm" class="space-y-5">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Full Name</label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            required 
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 focus:outline-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
            placeholder="John Doe" 
          />
        </div>
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email address</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required 
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 focus:outline-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
            placeholder="you@example.com" 
          />
        </div>
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Password</label>
          <input 
            type="password" 
            id="password" 
            name="password" 
            required 
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 focus:outline-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
            placeholder="••••••••" 
          />
          <div id="passwordRequirements" class="mt-2 text-xs text-gray-500 dark:text-gray-400">
            <p>Password must contain:</p>
            <ul class="list-disc list-inside space-y-1 mt-1">
              <li id="length">At least 8 characters</li>
              <li id="uppercase">One uppercase letter</li>
              <li id="lowercase">One lowercase letter</li>
              <li id="number">One number</li>
              <li id="special">One special character (@$!%*?&)</li>
            </ul>
          </div>
        </div>
        <div>
          <label for="confirmPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Confirm Password</label>
          <input 
            type="password" 
            id="confirmPassword" 
            name="confirmPassword" 
            required 
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-200 focus:outline-none bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
            placeholder="••••••••" 
          />
        </div>
        <div class="flex items-center">
          <input 
            type="checkbox" 
            id="terms" 
            name="terms" 
            required 
            class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
          />
          <label for="terms" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
            I agree to the <a href="/terms-of-service" class="text-primary-600 dark:text-primary-400 hover:underline">Terms of Service</a> and <a href="/privacy-policy" class="text-primary-600 dark:text-primary-400 hover:underline">Privacy Policy</a>
          </label>
        </div>
        <button 
          type="submit" 
          id="submitBtn"
          class="w-full py-3 px-4 bg-primary-600 dark:bg-neutral-800 text-white font-semibold rounded-lg shadow hover:bg-primary-700 dark:hover:bg-neutral-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="btnText">Create Account</span>
          <span id="btnSpinner" class="hidden">Creating account...</span>
        </button>
      </form>
      
      <p class="mt-6 text-center text-sm text-gray-600 dark:text-gray-400">
        Already have an account?
        <a href="/login" class="text-primary-600 dark:text-primary-400 hover:underline">Log in</a>
      </p>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('signupForm');
        const messageDiv = document.getElementById('message');
        const submitBtn = document.getElementById('submitBtn');
        const btnText = document.getElementById('btnText');
        const btnSpinner = document.getElementById('btnSpinner');
        const password = document.getElementById('password') as HTMLInputElement;
        const confirmPassword = document.getElementById('confirmPassword') as HTMLInputElement;

        // Password validation
        function validatePassword(password: string) {
          const requirements = {
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            number: /\d/.test(password),
            special: /[@$!%*?&]/.test(password)
          };

          // Update requirement indicators
          Object.keys(requirements).forEach(req => {
            const element = document.getElementById(req);
            if (element) {
              element.className = requirements[req] ? 'text-green-600' : 'text-red-600';
            }
          });

          return Object.values(requirements).every(Boolean);
        }

        function showMessage(text: string, type = 'error') {
          messageDiv.textContent = text;
          messageDiv.className = `mb-4 p-3 rounded-lg text-sm ${
            type === 'error' ? 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300' : 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300'
          }`;
          messageDiv.classList.remove('hidden');
        }

        function hideMessage() {
          messageDiv.classList.add('hidden');
        }

        function setLoading(loading: boolean) {
          (submitBtn as HTMLButtonElement).disabled = loading;
          btnText.classList.toggle('hidden', loading);
          btnSpinner.classList.toggle('hidden', !loading);
        }

        // Real-time password validation
        password.addEventListener('input', function() {
          validatePassword(this.value);
        });

        // Confirm password validation
        confirmPassword.addEventListener('input', function() {
          if (this.value && this.value !== password.value) {
            this.setCustomValidity('Passwords do not match');
          } else {
            this.setCustomValidity('');
          }
        });

        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const name = (document.getElementById('name') as HTMLInputElement).value.trim();
          const email = (document.getElementById('email') as HTMLInputElement).value.trim();
          const passwordValue = password.value;
          const confirmPasswordValue = confirmPassword.value;

          // Basic validation
          if (!name || !email || !passwordValue || !confirmPasswordValue) {
            showMessage('Please fill in all fields');
            return;
          }

          if (!email.includes('@')) {
            showMessage('Please enter a valid email address');
            return;
          }

          if (!validatePassword(passwordValue)) {
            showMessage('Please ensure your password meets all requirements');
            return;
          }

          if (passwordValue !== confirmPasswordValue) {
            showMessage('Passwords do not match');
            return;
          }

          setLoading(true);
          hideMessage();

          try {
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ name, email, password: passwordValue })
            });

            let data;
            
            // Check if response is ok first
            if (response.ok) {
              // Try to parse as JSON for successful responses
              try {
                data = await response.json();
              } catch (jsonError) {
                // If JSON parsing fails on successful response, show generic success message
                showMessage('Account created successfully! Please check your email to verify your account.', 'success');
                (form as HTMLFormElement).reset();
                setTimeout(() => {
                  window.location.href = '/login';
                }, 3000);
                return;
              }
              
              showMessage('Account created successfully! Please check your email to verify your account.', 'success');
              (form as HTMLFormElement).reset();
              setTimeout(() => {
                window.location.href = '/login';
              }, 3000);
            } else {
              // For error responses, try to parse as JSON first
              try {
                data = await response.json();
                showMessage(data.error || 'Registration failed');
              } catch (jsonError) {
                // If JSON parsing fails, it's likely an HTML error page
                const textResponse = await response.text();
                console.error('Server returned non-JSON response:', textResponse);
                showMessage('Registration failed. Please try again.');
              }
            }
          } catch (error) {
            console.error('Registration error:', error);
            showMessage('Network error. Please try again.');
          } finally {
            setLoading(false);
          }
        });

        // Clear message when user starts typing
        document.getElementById('name').addEventListener('input', hideMessage);
        document.getElementById('email').addEventListener('input', hideMessage);
        password.addEventListener('input', hideMessage);
        confirmPassword.addEventListener('input', hideMessage);
      });
    </script>
  </body>
</html>