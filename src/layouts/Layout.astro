---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "AI Growth Infrastructure for Business Development" } = Astro.props;
---


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="icon" type="image/png" href="/Astrix_favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&family=Figtree:ital,wght@0,300..900;1,300..900&family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap" rel="stylesheet">
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
  </head>
  <body class="font-sans antialiased bg-neutral-50 dark:bg-black text-neutral-900 dark:text-neutral-100 transition-colors duration-500 min-h-screen flex flex-col" style="background:#000 !important;background-image:none !important;">
    <!-- Loading Screen -->
    <div id="loading-screen" class="fixed inset-0 bg-white z-[9999] flex items-center justify-center transition-opacity duration-500">
      <img src="/Astrix_favicon.png" alt="Astrix" class="w-16 h-16 animate-pulse">
    </div>
    
    <script is:inline>
      // Hide loading screen when page is loaded
      window.addEventListener('load', function() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
          loadingScreen.style.opacity = '0';
          setTimeout(() => {
            loadingScreen.style.display = 'none';
          }, 500);
        }
      });
    </script>
    
    <main class="pt-16">
    <slot />
    </main>
    <script is:inline>
      const bg = document.getElementById('global-particles-bg');
      const lightBg = document.getElementById('global-light-bg');
      function createParticles(isDark) {
        bg.innerHTML = '';
        if (isDark) {
          // Black dark mode, no cosmic/particle backgrounds
          bg.innerHTML = '';
          lightBg.style.display = 'none';
        } else {
          // Light mode animated background: floating colored shapes
          bg.innerHTML = '';
          lightBg.innerHTML = '';
          lightBg.style.display = 'block';
          const colors = [
            'rgba(14,165,233,0.10)', // blue
            'rgba(139,92,246,0.10)', // purple
            'rgba(34,197,94,0.10)',  // green
            'rgba(251,191,36,0.10)', // yellow
            'rgba(239,68,68,0.10)'   // red
          ];
          for(let i=0;i<18;i++){
            const s = document.createElement('div');
            const size = Math.random()*120+60;
            s.style.position = 'absolute';
            s.style.width = s.style.height = `${size}px`;
            s.style.borderRadius = `${Math.random()>0.5?50:30}%`;
            s.style.background = colors[Math.floor(Math.random()*colors.length)];
            s.style.left = `${Math.random()*100}%`;
            s.style.top = `${Math.random()*100}%`;
            s.style.filter = 'blur(2px)';
            s.style.animation = `floatShape ${6+Math.random()*8}s ease-in-out infinite alternate`;
            lightBg.appendChild(s);
          }
        }
      }
      // Initial
      createParticles(document.documentElement.classList.contains('dark'));
      // Listen for theme changes
      const observer = new MutationObserver(() => {
        createParticles(document.documentElement.classList.contains('dark'));
      });
      observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    </script>
    <style is:inline>
      body {
        transition: background 0.5s;
      }
      body.dark {
    background: #000 !important;
  }

  /* Global h2 font weight override */
  h2 {
    font-weight: 500 !important;
      }
      @keyframes particleFloat {
        0% { transform: translateY(0) scale(1); }
        100% { transform: translateY(-40px) scale(1.15); }
      }
      @keyframes cosmicFloat {
        0% { transform: translateY(0) translateX(0) scale(1) rotate(0deg); }
        50% { transform: translateY(-30px) translateX(10px) scale(1.1) rotate(180deg); }
        100% { transform: translateY(-60px) translateX(-10px) scale(1.2) rotate(360deg); }
      }
      @keyframes cosmicShape {
        0% { transform: translateY(0) scale(1) rotate(0deg); opacity: 0.3; }
        50% { transform: translateY(-40px) scale(1.15) rotate(180deg); opacity: 0.6; }
        100% { transform: translateY(-80px) scale(1.3) rotate(360deg); opacity: 0.3; }
      }
      @keyframes floatShape {
        0% { transform: translateY(0) scale(1) rotate(0deg); }
        100% { transform: translateY(-60px) scale(1.08) rotate(8deg); }
      }
      #global-particles-bg div:hover, #global-light-bg div:hover {
        filter: brightness(1.5);
      }
      #global-light-bg {
        position: fixed;
        z-index: -2;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        pointer-events: none;
        transition: opacity 0.5s;
      }
    </style>

    <!--  -->
<!-- Chatbot Widget Start -->
<style>
  #astrix-chatbot-btn {
    position: fixed; bottom: 32px; right: 32px; z-index: 1000;
    width: 56px; height: 56px; border-radius: 50%;
    background: #F5A623; color: #fff; border: none;
    box-shadow: 0 4px 16px rgba(0,0,0,0.15); cursor: pointer;
    display: flex; align-items: center; justify-content: center; font-size: 28px;
    transition: background 0.3s;
  }
  #astrix-chatbot-popup {
    display: none; position: fixed; bottom: 100px; right: 32px; z-index: 1001;
    width: 320px; max-width: 90vw; background: #fff; border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.18); overflow: hidden;
    flex-direction: column;
    transition: background 0.3s, color 0.3s;
  }
  #astrix-chatbot-popup.open { display: flex; }
  #astrix-chatbot-header {
    background: #F5A623; color: #fff; padding: 16px; font-weight: bold;
    display: flex; align-items: center; justify-content: space-between;
    transition: background 0.3s, color 0.3s;
  }
  #astrix-chatbot-messages {
    flex: 1;
    padding: 16px;
    overflow-y: auto;
    height: 320px;
    max-height: 320px;
    min-height: 200px;
    background: transparent;
    scroll-behavior: smooth;
  }
  #astrix-chatbot-input-area { display: flex; border-top: 1px solid #eee; }
  #astrix-chatbot-input {
    flex: 1; border: none; padding: 12px; outline: none;
    background: transparent; color: #222;
    transition: color 0.3s;
  }
  #astrix-chatbot-send {
    background: #F5A623; color: #fff; border: none; padding: 0 16px; cursor: pointer;
    transition: background 0.3s;
  }
  /* Dark mode styles for chatbot */
  body.dark #astrix-chatbot-btn {
    background: #2563eb; /* blue-600 */
    color: #fff;
  }
  body.dark #astrix-chatbot-popup {
    background: #18181b; /* zinc-900 */
    color: #f3f4f6;
  }
  body.dark #astrix-chatbot-header {
    background: #2563eb; /* blue-600 */
    color: #fff;
  }
  body.dark #astrix-chatbot-input {
    color: #f3f4f6;
  }
  body.dark #astrix-chatbot-send {
    background: #2563eb;
    color: #fff;
  }
</style>
  <button id="astrix-chatbot-btn" aria-label="Open chat">
    <svg width="28" height="28" fill="white" viewBox="0 0 24 24">
      <path d="M12 3C7.03 3 3 6.58 3 11c0 1.61.62 3.09 1.69 4.36L3 21l5.04-1.67C9.34 19.77 10.65 20 12 20c4.97 0 9-3.58 9-8s-4.03-8-9-8z"/>
    </svg>
  </button>
  <div id="astrix-chatbot-popup">
    <div id="astrix-chatbot-header">
      <img src="/AI_Chatbot.jpg" alt="Astrix Chatbot" style="width:32px;height:32px;border-radius:50%;margin-right:8px;" />
      <span style="font-weight:bold;">Astrix Chatbot</span>
      <button onclick="document.getElementById('astrix-chatbot-popup').classList.remove('open')" style="background:none;border:none;color:#fff;font-size:20px;cursor:pointer;">Ã—</button>
    </div>
    <div id="astrix-chatbot-messages">
      <div style="margin-bottom:8px;background:#f5a623;color:#fff;padding:10px 16px;border-radius:16px 16px 16px 4px;display:inline-block;max-width:80%;font-weight:500;">Hi, I can help you get the answers</div>
    </div>
    <div id="astrix-chatbot-input-area">
      <input id="astrix-chatbot-input" type="text" placeholder="Type your message..." />
      <button id="astrix-chatbot-send">Send</button>
    </div>
  </div>
  <script>
    const btn = document.getElementById('astrix-chatbot-btn');
    const popup = document.getElementById('astrix-chatbot-popup');
    const inputEl = document.getElementById('astrix-chatbot-input');
    const send = document.getElementById('astrix-chatbot-send');
    const messages = document.getElementById('astrix-chatbot-messages');
    btn.onclick = () => popup.classList.toggle('open');
    send.onclick = () => {
      if (inputEl && (inputEl as HTMLInputElement).value.trim()) {
        const userInput = (inputEl as HTMLInputElement).value.trim();
        // User message (left, like incoming)
        // Always start user messages on a new line
        const userDivs = Array.from(messages.children).filter(el => el.nodeType === 1 && (el as HTMLElement).style.textAlign === 'left');
        if (userDivs.length === 0) {
          messages.appendChild(document.createElement('br'));
        }
        const userMsg = document.createElement('div');
        userMsg.textContent = userInput;
        userMsg.style.textAlign = 'left';
        userMsg.style.margin = '12px 0 4px 0';
        userMsg.style.padding = '10px 14px';
        userMsg.style.borderRadius = '16px 16px 16px 4px';
        userMsg.style.display = 'inline-block';
        userMsg.style.maxWidth = '80%';
        userMsg.style.wordBreak = 'break-word';
        userMsg.style.alignSelf = 'flex-start';
        userMsg.style.boxShadow = '0 1px 4px rgba(0,0,0,0.04)';
        if (document.body.classList.contains('dark')) {
          userMsg.style.background = '#23272f';
          userMsg.style.color = '#fff';
        } else {
          userMsg.style.background = '#f3f4f6';
          userMsg.style.color = '#18181b';
        }
        messages.appendChild(userMsg);
        messages.appendChild(document.createElement('br'));

        // Expanded Knowledge base Q&A pairs
        const knowledgeBase = [
          // About
          { q: ["what is astrix", "about astrix", "who are you", "what do you do", "company info", "what is your mission", "what is your goal", "what is your vision"],
            a: "Astrix Digital Media empowers businesses to automate, scale, and thrive in the digital age with advanced AI automation. Our mission is to make AI automation accessible, effective, and transformative for every business." },
          { q: ["what are your values", "company values", "core values", "principles"],
            a: "Our values: Innovation, Integrity, Partnership, Results." },
          { q: ["who is on your team", "team", "who works at astrix", "your team", "staff", "experts"],
            a: "Astrix is powered by a diverse team of AI experts, engineers, designers, and business strategists dedicated to your success." },
          // Services
          { q: ["what services do you offer", "what do you offer", "your services", "what can you do for my business", "solutions", "what are your main services", "list of services", "service list", "what can you help with", "what problems do you solve"],
            a: "We offer: AI Growth Consulting, Traffic Management, Chatbot Development, AI Voice Agents, Workflow Automations, and CRM & Lead Management." },
          { q: ["ai growth consulting", "consulting", "growth consulting", "business consulting"],
            a: "AI Growth Consulting: We develop a custom AI strategy aligned with your business goals. Get clear on what matters fast and develop a roadmap for success." },
          { q: ["traffic management", "audience", "outreach", "visibility", "get more customers", "find clients"],
            a: "Traffic Management: Attract the right audience, refine your messaging, and maximize visibility for your business." },
          { q: ["chatbot development", "chatbot", "ai chatbot", "website chatbot", "lead capture", "chat bot"],
            a: "Chatbot Development: Our AI chatbots instantly engage, answer, and capture leads on your website and social media." },
          { q: ["ai voice agents", "voice agent", "voice assistant", "phone automation", "call automation", "ai calls"],
            a: "AI Voice Agents: Automate inbound and outbound calls with natural-sounding AI voice assistants for service, reminders, and more." },
          { q: ["workflow automation", "automations", "process automation", "save time", "eliminate repetitive tasks", "internal automation"],
            a: "Workflow Automations: We automate internal processes so your team stays focused on what matters. Save hours every week by eliminating repetitive tasks." },
          { q: ["crm", "lead management", "sales pipeline", "crm system", "manage leads", "customer management"],
            a: "CRM & Lead Management: We optimize your sales pipeline with intelligent campaigns that nurture and convert every opportunity." },
          // Features
          { q: ["features", "key features", "main features", "unique features", "what makes you different", "why choose astrix"],
            a: "Key features: Custom AI strategy, lead-capturing chatbots, AI voice agents, workflow automations, CRM optimization, analytics dashboard, and ongoing support." },
          { q: ["do you offer support", "customer support", "help after purchase", "ongoing support"],
            a: "Yes, we provide ongoing monthly support for all our plans." },
          // Pricing
          { q: ["pricing", "plans", "cost", "how much", "price", "how much does it cost", "what are your prices", "plan details", "subscription", "monthly fee", "setup fee"],
            a: "We offer three plans: Foundation ($1,000 setup, $297/month), Growth (from $2,500 setup, $497/month), and Executive (custom quote)." },
          { q: ["foundation plan", "starter plan", "basic plan"],
            a: "Foundation Plan: $1,000 setup, $297/month. For early-stage businesses. Includes AI website, chatbot, workflow automation, and support." },
          { q: ["growth plan", "mid plan", "scaling plan"],
            a: "Growth Plan: From $2,500 setup, $497/month. For scaling businesses. Includes custom website, advanced automation, CRM, AI voice agent, analytics, and more." },
          { q: ["executive plan", "top plan", "enterprise plan"],
            a: "Executive Plan: Custom quote. For established teams. Includes everything in Growth, plus full AI infrastructure, custom integrations, and ongoing optimization." },
          // Contact
          { q: ["contact", "how can i contact you", "email", "phone", "get in touch", "reach you", "contact info", "contact information"],
            a: "You can contact us at info@astrixdigitalmedia.com or call (313) 398-6372. We respond within 2 hours during business hours." },
          { q: ["demo", "free demo", "book demo", "schedule demo", "see a demo", "demo call", "demo meeting"],
            a: "You can schedule a free personalized demo to see how our AI infrastructure can transform your business." },
          // Process
          { q: ["how does it work", "process", "what to expect", "how to get started", "steps", "onboarding", "how do i start"],
            a: "Our process: Discovery Call â†’ Live Demo â†’ Custom Proposal. We learn about your business, show you a live demo, and provide a tailored solution." },
          { q: ["response time", "how fast do you reply", "how long to respond", "when will you reply"],
            a: "We respond within 2 hours during business hours." },
          { q: ["who are your clients", "who do you work with", "what industries", "what types of businesses", "do you work with small businesses", "do you work with enterprises"],
            a: "We work with businesses of all sizes and industries, from startups to established enterprises." },
          { q: ["testimonials", "reviews", "customer feedback", "success stories"],
            a: "Our clients have seen transformative results. For testimonials and case studies, please contact us or schedule a demo." },
        ];

        // Find best match (case-insensitive, simple keyword match)
        const inputLower = userInput.toLowerCase();
        let answer = null;
        for (const item of knowledgeBase) {
          if (item.q.some(q => inputLower.includes(q))) {
            answer = item.a;
            break;
          }
        }
        if (!answer) {
          answer = "Sorry, I can only answer questions about our website and services. Please check our FAQ or contact us!";
        }
        setTimeout(() => {
          // Bot message (right, like outgoing)
          const botMsg = document.createElement('div');
          botMsg.textContent = answer;
          botMsg.style.textAlign = 'right';
          botMsg.style.margin = '4px 0 16px 0';
          botMsg.style.padding = '10px 14px';
          botMsg.style.borderRadius = '16px 16px 4px 16px';
          botMsg.style.display = 'inline-block';
          botMsg.style.maxWidth = '80%';
          botMsg.style.wordBreak = 'break-word';
          botMsg.style.alignSelf = 'flex-end';
          botMsg.style.boxShadow = '0 1px 4px rgba(0,0,0,0.04)';
          if (document.body.classList.contains('dark')) {
            botMsg.style.background = '#2563eb';
            botMsg.style.color = '#fff';
          } else {
            botMsg.style.background = '#F5A623';
            botMsg.style.color = '#fff';
          }
          messages.appendChild(botMsg);
          messages.appendChild(document.createElement('br'));
          messages.scrollTop = messages.scrollHeight;
        }, 600);
        (inputEl as HTMLInputElement).value = '';
        messages.scrollTop = messages.scrollHeight;
      }
    };
    inputEl && inputEl.addEventListener('keydown', function(e) { if (e && e.key === 'Enter') send.onclick && send.onclick(new MouseEvent('click')); });
  </script>
  <!-- Chatbot Widget End -->

    <!--  -->

    <script is:inline>
      // Only apply black background and remove background-image in dark mode
      function setDarkBg() {
        if (document.documentElement.classList.contains('dark')) {
          document.documentElement.style.background = '#000';
          document.documentElement.style.backgroundImage = 'none';
          document.body.style.background = '#000';
          document.body.style.backgroundImage = 'none';
        } else {
          document.documentElement.style.background = '';
          document.documentElement.style.backgroundImage = '';
          document.body.style.background = '';
          document.body.style.backgroundImage = '';
        }
      }
      setDarkBg();
      // Listen for theme changes
      const darkObs = new MutationObserver(setDarkBg);
      darkObs.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    </script>

  </body>
</html>

<style is:global>
  html {
    scroll-behavior: smooth;
  }
  
  body {
    margin: 0;
    padding: 0;
  }

  .dark section {
    background-color: #000 !important;
  }

  html, body, * {
    font-family: 'Figtree', 'Figtree Placeholder', sans-serif !important;
  }
  /* Reveal on scroll effect */
  .reveal-on-scroll {
    opacity: 0;
    transform: translateY(40px);
    transition: opacity 0.7s cubic-bezier(.4,0,.2,1), transform 0.7s cubic-bezier(.4,0,.2,1);
    will-change: opacity, transform;
  }
  .reveal-on-scroll.visible {
    opacity: 1;
    transform: translateY(0);
  }
  /* FORCE solid black background in dark mode, remove any gradient or image */
  body.dark, html.dark, .dark {
    background: #000 !important;
    background-image: none !important;
  }
  
  /* Custom Button CSS from Uiverse.io by adamgiebl */
  .cssbuttons-io {
    position: relative;
    font-family: inherit;
    font-weight: 500;
    font-size: 18px;
    letter-spacing: 0.05em;
    border-radius: 0.8em;
    cursor: pointer;
    border: none;
    background: linear-gradient(to right, #8e2de2, #4a00e0);
    color: #000;
    overflow: hidden;
    text-decoration: none;
    display: inline-block;
  }

  .cssbuttons-io svg {
    width: 1.2em;
    height: 1.2em;
    margin-right: 0.5em;
  }

  .cssbuttons-io span {
    position: relative;
    z-index: 10;
    transition: color 0.4s;
    display: inline-flex;
    align-items: center;
    padding: 0.8em 1.2em 0.8em 1.05em;
  }

  .cssbuttons-io::before,
  .cssbuttons-io::after {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  .cssbuttons-io::before {
    content: "";
    background: #fff;
    width: 120%;
    left: -10%;
    transform: skew(30deg);
    transition: transform 0.4s cubic-bezier(0.3, 1, 0.8, 1);
  }

  .cssbuttons-io:hover::before {
    transform: translate3d(100%, 0, 0);
  }

  .cssbuttons-io:active {
    transform: scale(0.95);
  }
  
  
  
  /* Glass morphism pricing cards from Uiverse.io by codebykay101 */
  .pricing-container {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    flex-wrap: wrap;
  }

  .pricing-container .glass {
    position: relative;
    width: 300px;
    height: 550px;
    background: linear-gradient(#fff2, transparent);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 25px 25px rgba(0, 0, 0, 0.25);
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 10px;
    margin: 0 -45px;
    backdrop-filter: blur(10px);
    transform: rotate(calc(var(--r) * 1deg));
    padding: 20px 0;
    overflow-y: auto;
  }

  .pricing-container:hover .glass {
    transform: rotate(0deg);
    margin: 0 10px;
  }

  .pricing-container .glass::before {
    content: attr(data-text);
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 40px;
    background: rgba(255, 255, 255, 0.05);
    display: flex;
    justify-content: center;
    align-items: center;
    color: #fff;
    font-weight: bold;
  }
  
  .pricing-container .glass svg {
    font-size: 2.5em;
    fill: #fff;
  }

  /* Light theme text colors */
  .light .pricing-container .glass h3,
  .light .pricing-container .glass p,
  .light .pricing-container .glass div,
  .light .pricing-container .glass li {
    color: #000 !important;
  }

  .light .pricing-container .glass::before {
    color: #000 !important;
  }

  .light .pricing-container .glass svg {
    fill: #000 !important;
  }

  /* Dark theme text colors (unchanged) */
  .dark .pricing-container .glass h3,
  .dark .pricing-container .glass p,
  .dark .pricing-container .glass div,
  .dark .pricing-container .glass li {
    color: #fff !important;
  }

  .dark .pricing-container .glass::before {
    color: #fff !important;
  }

  .dark .pricing-container .glass svg {
    fill: #fff !important;
  }

  /* Pure CSS Shuffling Effect */
  @property --angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: true;
  }

  /* Hide radio buttons */
  input[type="radio"] {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .cards {
    --img-w: 200px;
    --duration: 300ms;
    --img-easing: cubic-bezier(0.34, 1.56, 0.64, 1);
    width: min(100% - 4rem, 800px);
    margin-inline: auto;
    display: grid;
    counter-reset: my-counter;
  }

  .card {
    --cards-grid-cols: auto;
    --cards-grid-rows: var(--img-w) auto;
    --cards-grid-gap: 2rem;
    --cards-footer-justify: center;
    
    grid-area: 1/1;
    display: grid;
    place-items: center; 
    grid-template-columns: var(--cards-grid-cols);
    grid-template-rows: var(--cards-grid-rows);
    gap: var(--cards-grid-gap);
  }

  @media (min-width: 600px) {
    .card {
      --cards-grid-cols: var(--img-w) auto;
      --cards-grid-rows: auto;
      --cards-grid-gap: 4rem;
      --cards-footer-justify: start;
    }
  }

  .card-img {
    width: 200px;
    height: 200px;
    aspect-ratio: 1 / 1;
    rotate: var(--angle, 0deg);
    border-radius: 10px;
    border: 3px solid #FFF;
    overflow: hidden;
    transform-origin: center;
    object-fit: cover;
    box-shadow: 0 0 5px 3px rgba(0 0 0 / .05);
    background: beige;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .card-icon {
    font-size: 4rem;
    color: white;
  }

  /* Animation for each card */
  input:nth-of-type(1):checked + .card ~ .card > .card-img {
    animation: straighten-img-1 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(2):checked) > .card-img,
  input:nth-of-type(2):checked + .card ~ .card > .card-img {
    animation: straighten-img-2 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(3):checked) > .card-img,
  input:nth-of-type(3):checked + .card ~ .card > .card-img {
    animation: straighten-img-3 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }
  .card:has(~input:nth-of-type(4):checked) > .card-img,
  input:nth-of-type(4):checked + .card ~ .card > .card-img {
    animation: straighten-img-4 calc(var(--duration) * 2) forwards;
    animation-timing-function: var(--img-easing);
  }

  /* Keyframes for straightening */
  @keyframes straighten-img-1 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-2 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-3 { 50%{ --angle: 0deg;} }
  @keyframes straighten-img-4 { 50%{ --angle: 0deg;} }

  /* Stacking order */
  .card {
    z-index: -1;
  }
  input:checked + .card {
    z-index: 10 !important;
  }
  /* next card checked - place behind */
  .card:has(+input:checked) {
    z-index: 9;
  }
  /* next card +1 checked - place behind */
  .card:has(+input + .card + input:checked) {
    z-index: 8;
  }
  /* next card +2 checked - place behind */
  .card:has(+input + .card + input + .card + input:checked) {
    z-index: 7;
  }
  /* next card +3 checked - place behind */
  .card:has(+input + .card + input + .card + input + .card + input:checked) {
    z-index: 6;
  }

  .card-data {
    display: grid;
    gap: 1rem;
  }
  .card-data > .card-num {
    opacity: var(--data-opacity, 0);
    font-size: .8rem;
    color: #666;
  }
  .card-data > p {
    font-size: 0.9rem;
  }
  .card-data > h2,
  .card-data > p {
    transition: var(--duration) ease-in-out;
    transition-delay: var(--data-delay,0ms);
    opacity: var(--data-opacity, 0);
    translate: 0 var(--data-y, 20px);
  }
  .card-data > footer {
    display: flex;
    justify-content: var(--cards-footer-justify);
    gap: 2rem;
  }
  .card-data > footer label {
    margin-block-start: auto;
    cursor: pointer;
    pointer-events: var(--card-events, none);
    opacity: var(--data-opacity, 0);
    transition: color var(--duration) ease-in-out;
    color: var(--label-clr-txt,#000);
    background-color: var(--label-clr-bg,#EEE);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    aspect-ratio: 1/1;
    display: grid;
    place-content: center;
    transition: background-color 300ms ease-in-out,color 300ms ease-in-out;
  }

  input:checked:focus-visible + .card > .card-data > footer label,
  .card-data > footer label:hover {
    --label-clr-txt: #FFF;
    --label-clr-bg: steelblue;
  }

  input:checked + .card {
    --data-opacity: 1;
    --data-y: 0;
    --data-delay: var(--duration);
    --card-events: auto;
    transition: z-index;
    transition-delay: 300ms;
  }

  input:checked + .card > .card-img {
    animation: reveal-img calc(var(--duration) * 2) forwards;
  }

  @keyframes reveal-img {
    50% {
      translate: -150% 0;
      --angle: 0deg;
    }
  }

  /* Dark mode adjustments */
  .dark .card-img {
    border-color: #374151;
  }
  .dark .card-data > .card-num {
    color: #9CA3AF;
  }
  .dark .card-data > footer label {
    --label-clr-txt: #D1D5DB;
    --label-clr-bg: #374151;
  }
  .dark .card-data > footer label:hover {
    --label-clr-txt: #FFF;
    --label-clr-bg: #3B82F6;
  }

  /* Animated CTA buttons from Uiverse.io by bhaveshxrawat */
  .cta-card {
    width: auto;
    height: auto;
    min-height: 50px;
    background: #07182E;
    position: relative;
    display: flex;
    place-content: center;
    place-items: center;
    overflow: hidden;
    border-radius: 20px;
    padding: 12px 24px;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .cta-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  }

  .cta-card h2, .cta-card span {
    z-index: 1;
    color: white;
    font-size: 1.1em;
    font-weight: 600;
    margin: 0;
  }

  .cta-card::before {
    content: '';
    position: absolute;
    width: 100px;
    background-image: linear-gradient(180deg, rgb(0, 183, 255), rgb(255, 48, 255));
    height: 130%;
    animation: circleBorder 3s linear infinite;
    transition: all 0.2s linear;
  }

  @keyframes circleBorder {
    0% {
      transform: rotate(0deg) translateX(-50px) translateY(-50px);
    }
    25% {
      transform: rotate(90deg) translateX(50px) translateY(-50px);
    }
    50% {
      transform: rotate(180deg) translateX(50px) translateY(50px);
    }
    75% {
      transform: rotate(270deg) translateX(-50px) translateY(50px);
    }
    100% {
      transform: rotate(360deg) translateX(-50px) translateY(-50px);
    }
  }

  .cta-card::after {
    content: '';
    position: absolute;
    background: #07182E;
    inset: 5px;
    border-radius: 15px;
  }

  /* Dark theme adjustments */
  .dark .cta-card {
    background: #07182E;
  }

  .dark .cta-card::after {
    background: #07182E;
  }

  /* Light theme adjustments */
  .light .cta-card {
    background: #1a1a1a;
  }

  .light .cta-card::after {
    background: #1a1a1a;
  }

  .light .cta-card h2, .light .cta-card span {
    color: white;
  }

  /* Slide from right animation for before & after container */
  .slide-from-right {
    opacity: 0;
    transform: translateX(100px);
    transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: opacity, transform;
  }

  .slide-from-right.visible {
    opacity: 1;
    transform: translateX(0);
  }

  /* Stagger the animation for different elements */
  .slide-from-right:nth-child(1) { transition-delay: 0.1s; }
  .slide-from-right:nth-child(2) { transition-delay: 0.2s; }
  .slide-from-right:nth-child(3) { transition-delay: 0.3s; }
  .slide-from-right:nth-child(4) { transition-delay: 0.4s; }
  .slide-from-right:nth-child(5) { transition-delay: 0.5s; }
  .slide-from-right:nth-child(6) { transition-delay: 0.6s; }

  /* --- Mobile improvements for .cards carousel --- */
  @media (max-width: 640px) {
    .cards {
      width: 100%;
      gap: 0.5rem;
      padding: 0 0.5rem;
    }
    .card {
      --img-w: 120px;
      gap: 1rem;
      padding: 1rem 0.5rem;
      font-size: 0.95rem;
    }
    .card-img {
      width: 120px;
      height: 120px;
      min-width: 100px;
      min-height: 100px;
      max-width: 90vw;
      max-height: 40vw;
    }
    .card-data > h2 {
      font-size: 1.1rem;
    }
    .card-data > p {
      font-size: 0.95rem;
    }
    .card-data > .card-num {
      font-size: 0.7rem;
    }
    .card-data > footer label {
      width: 28px;
      height: 28px;
      font-size: 1.1rem;
    }
  }

  /* --- General mobile section padding and font improvements --- */
  @media (max-width: 640px) {
    section, .section {
      padding-left: 0.5rem !important;
      padding-right: 0.5rem !important;
      padding-top: 2rem !important;
      padding-bottom: 2rem !important;
    }
    h1, .text-5xl, .text-4xl {
      font-size: 2rem !important;
    }
    h2, .text-3xl {
      font-size: 1.4rem !important;
    }
    h3, .text-2xl {
      font-size: 1.1rem !important;
    }
    p, .text-lg, .text-xl {
      font-size: 1rem !important;
    }
    .max-w-4xl, .max-w-5xl, .max-w-6xl, .max-w-3xl {
      max-width: 100vw !important;
    }
    .flex, .grid {
      gap: 1rem !important;
    }
  }

  /* --- Prevent horizontal scroll on mobile --- */
  html, body {
    overflow-x: hidden !important;
  }

  /* --- Mobile improvements for Pricing section --- */
  @media (max-width: 640px) {
    .pricing-container {
      flex-direction: column !important;
      align-items: stretch !important;
      gap: 2rem !important;
      padding: 0 0.5rem !important;
    }
    .pricing-container .glass {
      width: 100% !important;
      max-width: 350px !important;
      min-width: 0 !important;
      height: auto !important;
      min-height: 500px !important;
      margin: 0 auto !important;
      padding: 15px 0 !important;
    }
  }

  /* --- Mobile improvements for Contact section --- */
  @media (max-width: 640px) {
    #contact .p-6, #contact .p-8, #contact .sm\:p-8 {
      padding: 1rem !important;
    }
    #contact .mb-16 {
      margin-bottom: 1.5rem !important;
    }
    #contact .text-3xl, #contact .md\:text-4xl {
      font-size: 1.3rem !important;
    }
    #contact .text-xl {
      font-size: 1rem !important;
    }
  }

  /* --- Mobile improvements for Footer --- */
  @media (max-width: 640px) {
    footer nav {
      flex-direction: column !important;
      align-items: flex-start !important;
      gap: 0.5rem !important;
      space-x-8: 0 !important;
    }
    footer .w-full {
      padding-left: 0.5rem !important;
      padding-right: 0.5rem !important;
    }
  }
</style>

<style>
@import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&family=Figtree:ital,wght@0,300..900;1,300..900&family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap');
  html, body, * {
    font-family: 'Figtree', 'Figtree Placeholder', sans-serif !important;
  }
</style>

<script is:inline>
  // Reveal on scroll for all .reveal-on-scroll elements
  document.addEventListener('DOMContentLoaded', function() {
    const revealEls = Array.from(document.querySelectorAll('.reveal-on-scroll'));
    const slideFromRightEls = Array.from(document.querySelectorAll('.slide-from-right'));
    
    if ('IntersectionObserver' in window) {
      // Observer for reveal-on-scroll elements
      const revealObserver = new IntersectionObserver((entries, obs) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            obs.unobserve(entry.target);
          }
        });
      }, { threshold: 0.15 });
      revealEls.forEach(el => revealObserver.observe(el));
      
      // Observer for slide-from-right elements
      const slideObserver = new IntersectionObserver((entries, obs) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            obs.unobserve(entry.target);
          }
        });
      }, { threshold: 0.2 });
      slideFromRightEls.forEach(el => slideObserver.observe(el));
    } else {
      // Fallback: show all
      revealEls.forEach(el => el.classList.add('visible'));
      slideFromRightEls.forEach(el => el.classList.add('visible'));
    }
  });
</script>

<style is:inline>
  /* Cycle animation for Why Choose Astrix cards */
  .cycle-card {
    animation: cycleGlow 4s ease-in-out infinite;
    position: relative;
    overflow: hidden;
  }

  .cycle-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    animation: cycleSweep 3s ease-in-out infinite;
  }

  @keyframes cycleGlow {
    0%, 100% {
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      transform: translateY(0);
    }
    25% {
      box-shadow: 0 15px 40px rgba(59, 130, 246, 0.2);
      transform: translateY(-2px);
    }
    50% {
      box-shadow: 0 20px 50px rgba(147, 51, 234, 0.3);
      transform: translateY(-4px);
    }
    75% {
      box-shadow: 0 15px 40px rgba(236, 72, 153, 0.2);
      transform: translateY(-2px);
    }
  }

  @keyframes cycleSweep {
    0% {
      left: -100%;
    }
    50% {
      left: 100%;
    }
    100% {
      left: 100%;
    }
  }

  /* Stagger the cycle animations */
  .cycle-card:nth-child(1) { animation-delay: 0s; }
  .cycle-card:nth-child(2) { animation-delay: 1s; }
  .cycle-card:nth-child(3) { animation-delay: 2s; }
  .cycle-card:nth-child(4) { animation-delay: 3s; }

  /* Dark theme adjustments for cycle cards */
  .dark .cycle-card {
    animation: cycleGlowDark 4s ease-in-out infinite;
  }

  @keyframes cycleGlowDark {
    0%, 100% {
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      transform: translateY(0);
    }
    25% {
      box-shadow: 0 15px 40px rgba(59, 130, 246, 0.4);
      transform: translateY(-2px);
    }
    50% {
      box-shadow: 0 20px 50px rgba(147, 51, 234, 0.5);
      transform: translateY(-4px);
    }
    75% {
      box-shadow: 0 15px 40px rgba(236, 72, 153, 0.4);
      transform: translateY(-2px);
    }
  }
</style>

<script is:inline>
  // Carousel functionality for Why Choose Astrix section
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('cards-container');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dots = document.querySelectorAll('.dot-indicator');
    const cards = document.querySelectorAll('.card-item');
    
    if (!container || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    const cardWidth = 320; // w-80 = 320px
    const gap = 32; // gap-8 = 32px
    const totalWidth = cardWidth + gap;
    
    function updateCarousel() {
      const translateX = -currentIndex * totalWidth;
      container.style.transform = `translateX(${translateX}px)`;
      container.style.transition = 'transform 0.5s ease-in-out';
      
      // Update dots
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentIndex);
        dot.classList.toggle('bg-blue-300', index === currentIndex);
        dot.classList.toggle('dark:bg-blue-600', index === currentIndex);
        dot.classList.toggle('bg-gray-300', index !== currentIndex);
        dot.classList.toggle('dark:bg-gray-600', index !== currentIndex);
      });
      
      // Update button states
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex === cards.length - 1;
      
      prevBtn.style.opacity = currentIndex === 0 ? '0.5' : '1';
      nextBtn.style.opacity = currentIndex === cards.length - 1 ? '0.5' : '1';
    }
    
    function nextSlide() {
      if (currentIndex < cards.length - 1) {
        currentIndex++;
        updateCarousel();
      }
    }
    
    function prevSlide() {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    }
    
    // Event listeners
    nextBtn.addEventListener('click', nextSlide);
    prevBtn.addEventListener('click', prevSlide);
    
    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateCarousel();
      });
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
      }
    });
    
    // Auto-play (optional)
    let autoPlayInterval;
    function startAutoPlay() {
      autoPlayInterval = setInterval(() => {
        if (currentIndex < cards.length - 1) {
          nextSlide();
        } else {
          currentIndex = 0;
          updateCarousel();
        }
      }, 5000); // Change slide every 5 seconds
    }
    
    function stopAutoPlay() {
      clearInterval(autoPlayInterval);
    }
    
    // Pause auto-play on hover
    container.addEventListener('mouseenter', stopAutoPlay);
    container.addEventListener('mouseleave', startAutoPlay);
    
    // Initialize
    updateCarousel();
    startAutoPlay();
  });
</script>

