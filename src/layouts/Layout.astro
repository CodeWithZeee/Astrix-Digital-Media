---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "AI Growth Infrastructure for Business Development" } = Astro.props;
---


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="icon" type="image/png" href="/Astrix_favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&family=Figtree:ital,wght@0,300..900;1,300..900&family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap" rel="stylesheet">
  </head>
  <body class="font-sans antialiased bg-neutral-50 dark:bg-black text-neutral-900 dark:text-neutral-100 transition-colors duration-500 min-h-screen flex flex-col">
    <slot />
    <script is:inline>
      const bg = document.getElementById('global-particles-bg');
      const lightBg = document.getElementById('global-light-bg');
      function createParticles(isDark) {
        bg.innerHTML = '';
        if (isDark) {
          // Black dark mode, no cosmic/particle backgrounds
          bg.innerHTML = '';
          lightBg.style.display = 'none';
        } else {
          // Light mode animated background: floating colored shapes
          bg.innerHTML = '';
          lightBg.innerHTML = '';
          lightBg.style.display = 'block';
          const colors = [
            'rgba(14,165,233,0.10)', // blue
            'rgba(139,92,246,0.10)', // purple
            'rgba(34,197,94,0.10)',  // green
            'rgba(251,191,36,0.10)', // yellow
            'rgba(239,68,68,0.10)'   // red
          ];
          for(let i=0;i<18;i++){
            const s = document.createElement('div');
            const size = Math.random()*120+60;
            s.style.position = 'absolute';
            s.style.width = s.style.height = `${size}px`;
            s.style.borderRadius = `${Math.random()>0.5?50:30}%`;
            s.style.background = colors[Math.floor(Math.random()*colors.length)];
            s.style.left = `${Math.random()*100}%`;
            s.style.top = `${Math.random()*100}%`;
            s.style.filter = 'blur(2px)';
            s.style.animation = `floatShape ${6+Math.random()*8}s ease-in-out infinite alternate`;
            lightBg.appendChild(s);
          }
        }
      }
      // Initial
      createParticles(document.documentElement.classList.contains('dark'));
      // Listen for theme changes
      const observer = new MutationObserver(() => {
        createParticles(document.documentElement.classList.contains('dark'));
      });
      observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    </script>
    <style is:inline>
      body {
        transition: background 0.5s;
      }
      body.dark {
        background: #18181b !important;
      }
      @keyframes particleFloat {
        0% { transform: translateY(0) scale(1); }
        100% { transform: translateY(-40px) scale(1.15); }
      }
      @keyframes cosmicFloat {
        0% { transform: translateY(0) translateX(0) scale(1) rotate(0deg); }
        50% { transform: translateY(-30px) translateX(10px) scale(1.1) rotate(180deg); }
        100% { transform: translateY(-60px) translateX(-10px) scale(1.2) rotate(360deg); }
      }
      @keyframes cosmicShape {
        0% { transform: translateY(0) scale(1) rotate(0deg); opacity: 0.3; }
        50% { transform: translateY(-40px) scale(1.15) rotate(180deg); opacity: 0.6; }
        100% { transform: translateY(-80px) scale(1.3) rotate(360deg); opacity: 0.3; }
      }
      @keyframes floatShape {
        0% { transform: translateY(0) scale(1) rotate(0deg); }
        100% { transform: translateY(-60px) scale(1.08) rotate(8deg); }
      }
      #global-particles-bg div:hover, #global-light-bg div:hover {
        filter: brightness(1.5);
      }
      #global-light-bg {
        position: fixed;
        z-index: -2;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        pointer-events: none;
        transition: opacity 0.5s;
      }
    </style>

    <!--  -->
<!-- Chatbot Widget Start -->
<style>
  #astrix-chatbot-btn {
    position: fixed; bottom: 32px; right: 32px; z-index: 1000;
    width: 56px; height: 56px; border-radius: 50%;
    background: #F5A623; color: #fff; border: none;
    box-shadow: 0 4px 16px rgba(0,0,0,0.15); cursor: pointer;
    display: flex; align-items: center; justify-content: center; font-size: 28px;
    transition: background 0.3s;
  }
  #astrix-chatbot-popup {
    display: none; position: fixed; bottom: 100px; right: 32px; z-index: 1001;
    width: 320px; max-width: 90vw; background: #fff; border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.18); overflow: hidden;
    flex-direction: column;
    transition: background 0.3s, color 0.3s;
  }
  #astrix-chatbot-popup.open { display: flex; }
  #astrix-chatbot-header {
    background: #F5A623; color: #fff; padding: 16px; font-weight: bold;
    display: flex; align-items: center; justify-content: space-between;
    transition: background 0.3s, color 0.3s;
  }
  #astrix-chatbot-messages { flex: 1; padding: 16px; overflow-y: auto; }
  #astrix-chatbot-input-area { display: flex; border-top: 1px solid #eee; }
  #astrix-chatbot-input {
    flex: 1; border: none; padding: 12px; outline: none;
    background: transparent; color: #222;
    transition: color 0.3s;
  }
  #astrix-chatbot-send {
    background: #F5A623; color: #fff; border: none; padding: 0 16px; cursor: pointer;
    transition: background 0.3s;
  }
  /* Dark mode styles for chatbot */
  body.dark #astrix-chatbot-btn {
    background: #2563eb; /* blue-600 */
    color: #fff;
  }
  body.dark #astrix-chatbot-popup {
    background: #18181b; /* zinc-900 */
    color: #f3f4f6;
  }
  body.dark #astrix-chatbot-header {
    background: #2563eb; /* blue-600 */
    color: #fff;
  }
  body.dark #astrix-chatbot-input {
    color: #f3f4f6;
  }
  body.dark #astrix-chatbot-send {
    background: #2563eb;
    color: #fff;
  }
</style>
  <button id="astrix-chatbot-btn" aria-label="Open chat">
    <svg width="28" height="28" fill="white" viewBox="0 0 24 24">
      <path d="M12 3C7.03 3 3 6.58 3 11c0 1.61.62 3.09 1.69 4.36L3 21l5.04-1.67C9.34 19.77 10.65 20 12 20c4.97 0 9-3.58 9-8s-4.03-8-9-8z"/>
    </svg>
  </button>
  <div id="astrix-chatbot-popup">
    <div id="astrix-chatbot-header">
      <img src="/AI_Chatbot.jpg" alt="AI Chatbot" style="width:32px;height:32px;border-radius:50%;margin-right:8px;" />
      <span style="font-weight:bold;">AI Chatbot</span>
      <button onclick="document.getElementById('astrix-chatbot-popup').classList.remove('open')" style="background:none;border:none;color:#fff;font-size:20px;cursor:pointer;">Ã—</button>
    </div>
    <div id="astrix-chatbot-messages">
      <div style="margin-bottom:8px;">Hi, I can help you get the answers</div>
    </div>
    <div id="astrix-chatbot-input-area">
      <input id="astrix-chatbot-input" type="text" placeholder="Type your message..." />
      <button id="astrix-chatbot-send">Send</button>
    </div>
  </div>
  <script>
    const btn = document.getElementById('astrix-chatbot-btn');
    const popup = document.getElementById('astrix-chatbot-popup');
    const inputEl = document.getElementById('astrix-chatbot-input');
    const send = document.getElementById('astrix-chatbot-send');
    const messages = document.getElementById('astrix-chatbot-messages');
    btn.onclick = () => popup.classList.toggle('open');
    send.onclick = () => {
      if (inputEl && (inputEl as HTMLInputElement).value.trim()) {
        const userMsg = document.createElement('div');
        userMsg.textContent = (inputEl as HTMLInputElement).value;
        userMsg.style.textAlign = 'right';
        userMsg.style.margin = '8px 0';
        messages.appendChild(userMsg);
        // Simulate bot reply
        setTimeout(() => {
          const botMsg = document.createElement('div');
          botMsg.textContent = "Thanks! We'll get back to you soon.";
          botMsg.style.textAlign = 'left';
          botMsg.style.margin = '8px 0';
          messages.appendChild(botMsg);
          messages.scrollTop = messages.scrollHeight;
        }, 800);
        (inputEl as HTMLInputElement).value = '';
        messages.scrollTop = messages.scrollHeight;
      }
    };
    inputEl && inputEl.addEventListener('keydown', function(e) { if (e && e.key === 'Enter') send.onclick && send.onclick(new MouseEvent('click')); });
  </script>
  <!-- Chatbot Widget End -->

    <!--  -->

  </body>
</html>

<style is:global>
  html {
    scroll-behavior: smooth;
  }
  
  body {
    margin: 0;
    padding: 0;
  }

  .dark section {
    background-color: #000 !important;
  }
</style>