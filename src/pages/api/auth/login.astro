---
import * as bcrypt from 'bcryptjs';
import * as jwt from 'jsonwebtoken';
import { userService, sessionService } from '../../../utils/database.js';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';

export async function POST({ request }) {
  try {
    const { email, password } = await request.json();

    // Validate input
    if (!email || !password) {
      return new Response(JSON.stringify({ 
        error: 'Email and password are required' 
      }), { 
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Find user
    const user = userService.findUserByEmail(email);
    if (!user) {
      return new Response(JSON.stringify({ 
        error: 'Invalid email or password' 
      }), { 
        status: 401,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Check if email is verified
    if (!user.email_verified) {
      return new Response(JSON.stringify({ 
        error: 'Please verify your email address before logging in. Check your inbox for a verification link.' 
      }), { 
        status: 401,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Verify password
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return new Response(JSON.stringify({ 
        error: 'Invalid email or password' 
      }), { 
        status: 401,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Generate JWT token
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role,
        uuid: user.uuid
      },
      JWT_SECRET,
      { expiresIn: '7d' }
    );

    // Create session in database
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days
    sessionService.createSession(user.id, token, expiresAt.toISOString());

    // Clean expired sessions
    sessionService.cleanExpiredSessions();

    // Return success response
    return new Response(JSON.stringify({
      success: true,
      token,
      user: {
        id: user.id,
        uuid: user.uuid,
        email: user.email,
        name: user.name,
        role: user.role,
        emailVerified: user.email_verified
      }
    }), {
      status: 200,
      headers: { 
        'Content-Type': 'application/json',
        'Set-Cookie': `auth_token=${token}; HttpOnly; Secure; SameSite=Strict; Max-Age=${7 * 24 * 60 * 60}`
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    return new Response(JSON.stringify({ 
      error: 'Internal server error' 
    }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
--- 