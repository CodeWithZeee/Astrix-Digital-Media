---
// Get URL parameters for verification success message
const url = new URL(Astro.request.url);
const verified = url.searchParams.get('verified');
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Login | Astrix Digital Media</title>
    <meta name="description" content="Login to your Astrix Digital Media account to access your AI-powered business dashboard." />
    <link rel="icon" type="image/png" href="/Astrix_favicon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="min-h-screen bg-gradient-to-br from-white to-gray-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
    <main class="w-full max-w-md sm:max-w-lg lg:max-w-xl p-6 sm:p-8 lg:p-10 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700 transition-all duration-300 hover:shadow-xl">
      <!-- Header -->
      <div class="text-center mb-8">
        <div class="mx-auto w-16 h-16 bg-gradient-to-r from-primary-500 to-primary-600 rounded-full flex items-center justify-center mb-4">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
        </div>
        <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-primary-600 dark:text-white mb-2">Welcome Back</h1>
        <p class="text-gray-600 dark:text-gray-400">Sign in to your account</p>
      </div>
      
      <!-- Success Message for Email Verification -->
      {verified && (
        <div class="mb-6 p-4 rounded-lg text-sm bg-green-50 border border-green-200 text-green-700 dark:bg-green-900/20 dark:border-green-800 dark:text-green-300 animate-fade-in">
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
            Email verified successfully! You can now log in to your account.
          </div>
        </div>
      )}
      
      <!-- Error/Success Messages -->
      <div id="message" class="hidden mb-6 p-4 rounded-lg text-sm transition-all duration-300"></div>
      
      <form id="loginForm" class="space-y-6">
        <!-- Email Field -->
        <div class="space-y-2">
          <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Email address
          </label>
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
              </svg>
            </div>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required 
              autocomplete="email"
              class="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400" 
              placeholder="you@example.com"
            />
            <div id="emailValidation" class="absolute inset-y-0 right-0 pr-3 flex items-center hidden">
              <svg class="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
            </div>
          </div>
          <div id="emailError" class="text-sm text-red-600 dark:text-red-400 hidden"></div>
        </div>

        <!-- Password Field -->
        <div class="space-y-2">
          <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Password
          </label>
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
              </svg>
            </div>
            <input 
              type="password" 
              id="password" 
              name="password" 
              required 
              autocomplete="current-password"
              class="w-full pl-10 pr-12 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400" 
              placeholder="••••••••"
            />
            <button 
              type="button" 
              id="togglePassword"
              class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors duration-200"
            >
              <svg id="eyeOpen" class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
              <svg id="eyeClosed" class="h-5 w-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
              </svg>
            </button>
          </div>
          <div id="passwordError" class="text-sm text-red-600 dark:text-red-400 hidden"></div>
        </div>

        <!-- Remember Me & Forgot Password -->
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input 
              id="remember" 
              name="remember" 
              type="checkbox" 
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded transition-colors duration-200"
            >
            <label for="remember" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
              Remember me
            </label>
          </div>
          <a href="/forgot-password" class="text-sm text-primary-600 dark:text-primary-400 hover:text-primary-500 dark:hover:text-primary-300 transition-colors duration-200 font-medium">
            Forgot password?
          </a>
        </div>

        <!-- Submit Button -->
        <button 
          type="submit" 
          id="submitBtn"
          class="w-full py-3 px-4 bg-gradient-to-r from-primary-600 to-primary-700 dark:from-[#a259ec] dark:to-[#9333ea] text-white font-semibold rounded-lg shadow-lg hover:from-primary-700 hover:to-primary-800 dark:hover:from-[#9333ea] dark:hover:to-[#7c3aed] focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-all duration-200 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
        >
          <span id="btnText" class="flex items-center justify-center">
            <svg id="btnIcon" class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
            </svg>
            Sign In
          </span>
          <span id="btnSpinner" class="hidden flex items-center justify-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Signing in...
          </span>
        </button>
      </form>
      
      <!-- Divider -->
      <div class="mt-8 mb-6">
        <div class="relative">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-300 dark:border-gray-600"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">Don't have an account?</span>
          </div>
        </div>
      </div>

      <!-- Sign Up Link -->
      <div class="text-center">
        <a href="/signup" class="inline-flex items-center justify-center w-full py-3 px-4 border border-gray-300 dark:border-gray-600 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-all duration-200">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
          </svg>
          Create new account
        </a>
      </div>
      
      <!-- Demo Credentials -->
      <div class="mt-8 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-700 dark:to-gray-600 rounded-lg border border-blue-200 dark:border-gray-500">
        <div class="flex items-start">
          <svg class="w-5 h-5 text-blue-500 dark:text-blue-400 mt-0.5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
          </svg>
          <div>
            <h3 class="text-sm font-semibold text-blue-800 dark:text-blue-300 mb-2">Demo Account</h3>
            <div class="text-xs text-blue-700 dark:text-blue-400 space-y-1">
              <div class="flex items-center justify-between">
                <span><strong>Email:</strong> admin@astrix.com</span>
                <button type="button" onclick="copyToClipboard('admin@astrix.com')" class="ml-2 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                  </svg>
                </button>
              </div>
              <div class="flex items-center justify-between">
                <span><strong>Password:</strong> admin123</span>
                <button type="button" onclick="copyToClipboard('admin123')" class="ml-2 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('loginForm');
        const messageDiv = document.getElementById('message');
        const submitBtn = document.getElementById('submitBtn');
        const btnText = document.getElementById('btnText');
        const btnSpinner = document.getElementById('btnSpinner');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const emailValidation = document.getElementById('emailValidation');
        const emailError = document.getElementById('emailError');
        const passwordError = document.getElementById('passwordError');
        const togglePassword = document.getElementById('togglePassword');
        const eyeOpen = document.getElementById('eyeOpen');
        const eyeClosed = document.getElementById('eyeClosed');

        // Real-time email validation
        function validateEmail(email) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return emailRegex.test(email);
        }

        // Real-time password validation
        function validatePassword(password) {
          return password.length >= 6; // Basic validation
        }

        // Show/hide validation indicators
        function updateEmailValidation(isValid) {
          if (isValid) {
            emailValidation.classList.remove('hidden');
            emailError.classList.add('hidden');
            emailInput.classList.remove('border-red-300', 'focus:border-red-500', 'focus:ring-red-500');
            emailInput.classList.add('border-green-300', 'focus:border-green-500', 'focus:ring-green-500');
          } else {
            emailValidation.classList.add('hidden');
            emailInput.classList.remove('border-green-300', 'focus:border-green-500', 'focus:ring-green-500');
          }
        }

        function showEmailError(message) {
          emailError.textContent = message;
          emailError.classList.remove('hidden');
          emailInput.classList.add('border-red-300', 'focus:border-red-500', 'focus:ring-red-500');
        }

        function showPasswordError(message) {
          passwordError.textContent = message;
          passwordError.classList.remove('hidden');
          passwordInput.classList.add('border-red-300', 'focus:border-red-500', 'focus:ring-red-500');
        }

        function clearFieldErrors() {
          emailError.classList.add('hidden');
          passwordError.classList.add('hidden');
          emailInput.classList.remove('border-red-300', 'focus:border-red-500', 'focus:ring-red-500');
          passwordInput.classList.remove('border-red-300', 'focus:border-red-500', 'focus:ring-red-500');
        }

        // Real-time email validation
        emailInput.addEventListener('input', function() {
          const email = this.value.trim();
          clearFieldErrors();
          
          if (email.length > 0) {
            if (validateEmail(email)) {
              updateEmailValidation(true);
            } else {
              updateEmailValidation(false);
              if (email.length > 3) { // Only show error after user has typed a bit
                showEmailError('Please enter a valid email address');
              }
            }
          } else {
            updateEmailValidation(false);
          }
        });

        // Real-time password validation
        passwordInput.addEventListener('input', function() {
          const password = this.value;
          clearFieldErrors();
          
          if (password.length > 0 && password.length < 6) {
            showPasswordError('Password must be at least 6 characters');
          }
        });

        // Password toggle functionality
        togglePassword.addEventListener('click', function() {
          const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
          passwordInput.setAttribute('type', type);
          
          eyeOpen.classList.toggle('hidden');
          eyeClosed.classList.toggle('hidden');
        });

        // Copy to clipboard function
        window.copyToClipboard = function(text) {
          navigator.clipboard.writeText(text).then(function() {
            showMessage('Copied to clipboard!', 'success');
            setTimeout(hideMessage, 2000);
          });
        };

        function showMessage(text, type = 'error') {
          messageDiv.textContent = text;
          messageDiv.className = `mb-6 p-4 rounded-lg text-sm transition-all duration-300 ${
            type === 'error' 
              ? 'bg-red-50 border border-red-200 text-red-700 dark:bg-red-900/20 dark:border-red-800 dark:text-red-300' 
              : 'bg-green-50 border border-green-200 text-green-700 dark:bg-green-900/20 dark:border-green-800 dark:text-green-300'
          }`;
          messageDiv.classList.remove('hidden');
          
          // Add icon
          const icon = type === 'error' 
            ? '<svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>'
            : '<svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>';
          
          messageDiv.innerHTML = icon + text;
        }

        function hideMessage() {
          messageDiv.classList.add('hidden');
        }

        function setLoading(loading) {
          submitBtn.disabled = loading;
          btnText.classList.toggle('hidden', loading);
          btnSpinner.classList.toggle('hidden', !loading);
          
          if (loading) {
            submitBtn.classList.add('cursor-not-allowed');
          } else {
            submitBtn.classList.remove('cursor-not-allowed');
          }
        }

        // Form submission
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const email = emailInput.value.trim();
          const password = passwordInput.value;
          const remember = document.getElementById('remember').checked;

          // Clear previous errors
          clearFieldErrors();
          hideMessage();

          // Validation
          if (!email) {
            showEmailError('Email is required');
            emailInput.focus();
            return;
          }

          if (!validateEmail(email)) {
            showEmailError('Please enter a valid email address');
            emailInput.focus();
            return;
          }

          if (!password) {
            showPasswordError('Password is required');
            passwordInput.focus();
            return;
          }

          if (!validatePassword(password)) {
            showPasswordError('Password must be at least 6 characters');
            passwordInput.focus();
            return;
          }

          setLoading(true);

          try {
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ email, password, remember })
            });

            // Check if the response is JSON before attempting to parse
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
              // Server returned non-JSON response (likely HTML error page)
              const textResponse = await response.text();
              console.error('Server returned non-JSON response:', textResponse);
              showMessage('Server error. Please try again later or contact support if the problem persists.');
              return;
            }

            const data = await response.json();

            if (response.ok) {
              // Store token in localStorage
              localStorage.setItem('authToken', data.token);
              localStorage.setItem('user', JSON.stringify(data.user));
              
              showMessage('Login successful! Redirecting...', 'success');
              
              // Redirect to dashboard or home page
              setTimeout(() => {
                window.location.href = '/';
              }, 1000);
            } else {
              showMessage(data.error || 'Login failed');
              
              // Focus appropriate field based on error
              if (data.error && data.error.toLowerCase().includes('email')) {
                emailInput.focus();
              } else if (data.error && data.error.toLowerCase().includes('password')) {
                passwordInput.focus();
              }
            }
          } catch (error) {
            console.error('Login error:', error);
            showMessage('Network error. Please check your connection and try again.');
          } finally {
            setLoading(false);
          }
        });

        // Auto-fill demo credentials
        window.fillDemoCredentials = function() {
          emailInput.value = 'admin@astrix.com';
          passwordInput.value = 'admin123';
          updateEmailValidation(true);
          emailInput.dispatchEvent(new Event('input'));
          passwordInput.dispatchEvent(new Event('input'));
        };

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
          // Ctrl/Cmd + Enter to submit form
          if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
            form.dispatchEvent(new Event('submit'));
          }
        });

        // Auto-focus first empty field
        if (!emailInput.value) {
          emailInput.focus();
        } else if (!passwordInput.value) {
          passwordInput.focus();
        }
      });
    </script>

    <style>
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      .animate-fade-in {
        animation: fadeIn 0.3s ease-out;
      }
      
      /* Custom focus styles */
      input:focus {
        outline: none;
      }
      
      /* Smooth transitions for all interactive elements */
      * {
        transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 150ms;
      }
    </style>
  </body>
</html>